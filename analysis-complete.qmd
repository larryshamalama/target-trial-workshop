---
title: "target-trial-practical"
format: revealjs
editor: visual
---

## 0. Pre-requisites

The data is available in the `designmatch` package.

```{r}
if (!requireNamespace("tidyverse")) {
  install.packages("tidyverse")
}

if (!requireNamespace("ggplot2")) {
  install.packages("ggplot2")
}

# data available here
if (!requireNamespace("MatchIt")) {
  install.packages("MatchIt")
}

library(tidyverse)
library(ggplot2)
library(MatchIt)
```

## 1. Loading and visualizing the data

```{r}
data(lalonde) # load the data
attach(lalonde)

head(lalonde)
```

```{r}
table(treat)
```

```{r}
long_data <- lalonde %>%
  pivot_longer(cols = c(re74, re75, re78), names_to = "variable", values_to = "value")

# Boxplots
ggplot(long_data, aes(x = variable, y = value, fill = variable)) +
  geom_boxplot() +
  scale_fill_manual(values = c("red", "green", "blue")) +
  labs(title = "Boxplots of 1974, 1975 and 1978 earnings",
       x = "Variable",
       y = "Value") +
  theme_minimal() +
  theme(legend.position = "none")
```

```{r}
# Kernel density estimates
density_re74 <- density(lalonde$re74)
density_re75 <- density(lalonde$re75)
density_re78 <- density(lalonde$re78)

plot(density_re74, main = "Kernel Density of 1974, 1975 and 1978 earnings", 
     xlab = "Earnings", ylab = "Density", xlim = range(c(density_re74$x, density_re75$x, density_re78$x)), 
     ylim = range(c(density_re74$y, density_re75$y, density_re78$y)), col = "red", lwd = 2)

lines(density_re75, col = "green", lwd = 2)
lines(density_re78, col = "blue", lwd = 2)

legend("topright", legend = c("re74", "re75", "re78"), col = c("red", "green", "blue"), lwd = 2)
```

## 2. Analysis

#### 2.1 Inverse Weighting

```{r}
trt_model <- glm(treat ~ educ + race + married + nodegree, data = lalonde, family = binomial())

# Get propensity scores
prob_trt <- predict(trt_model, type = "response")

# Calculate weights
iptw <- ifelse(treat == 1, 1/prob_trt, 1/(1 - prob_trt))

# Calculate the average treatment effect
ate <- sum((iptw * re78)[treat == 1]) / sum(iptw[treat == 1]) - sum((iptw * re78)[treat == 0]) / sum(iptw[treat == 0])

ate
```

#### 2.2 Outcome Regression via G-Computation

```{r}
out_model <- lm(re78 ~ treat + age + educ + married + nodegree, data = lalonde)

coef(out_model)["treat"]
```

#### 2.3 95% Confidence Intervals

While the variance formula of the IPTW-estimated is not available as a closed-form solution, we can use bootstrap via the `boot` package to estimate the standard deviation and 95% confidence interval of the estimated ATE.

```{r}
if (!require(boot)) {
  install.packages("boot")
  library(boot)
}

compute_ate <- function(data, indices) {
  bs_data <- data[indices,]
  bs_trt_model <- glm(treat ~ educ + race + married + nodegree, data = bs_data, family = binomial())
  
  bs_prob_trt <- predict(bs_trt_model, type = "response")
  bs_iptw <- ifelse(bs_data$treat == 1, 1/bs_prob_trt, 1/(1 - bs_prob_trt))
  
  bs_ate <- with(bs_data, sum((bs_iptw * re78)[treat == 1]) / sum(bs_iptw[treat == 1]) - sum((bs_iptw * re78)[treat == 0]) / sum(bs_iptw[treat == 0]))
  
  return(bs_ate)
}

# 1000 bootstrap replications
bs_results <- boot(data = lalonde, statistic = compute_ate, R = 1000)

boot.ci(bs_results, type = "perc")
```

If you used regression, you can simply look at the confidence interval from the summary table!

```{r}
confint(out_model)[2,]
```
